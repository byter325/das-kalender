openapi: 3.0.0
info:
  title: das kalender - API
  description: "This is a instance of 'das kalender'. To learn more about this project visit [Github](https://github.com/maxomnia/pm_project_rapla)."
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.1.1
tags:
  - name: Calendar
    description: Access to calendar data
  - name: Users
    description: Operations about users
  - name: Groups
    description: Operations about groups
  - name: Token
    description: Operations about Auth-Token
paths:
  /api/calendar/{uid}:
    post:
      tags:
        - Calendar
      summary: Add a new event to the calendar
      description: "You must either own this calendar, have the associated group set as editableGroup or be an administrator to perform this action."
      operationId: createEvent
      parameters:
        - name: uid
          in: path
          description: UID of the user or group that owns the calendar
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Event that needs to be added to the calendar
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        "201":
          description: Successfully created event
        "400":
          description: Invalid input
      security:
        - auth_token_header: []
        - auth_token_cookie: []
    get:
      tags:
        - Calendar
      summary: Get all events from a calendar
      description: "You must either own this calendar, have the associated group set as group/editableGroup or be an administrator to perform this action."
      operationId: getEvent
      parameters:
        - name: uid
          in: path
          description: UID of the user or group that owns the calendar
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: eventID
          in: query
          description: UID of the event that should get returned (optional)
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: type
          in: query
          description: Type of the answer given by the server (optional)
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum: ["HTML", "XML"]
        - name: timeline
          in: query
          description: Should the result be the timeline. Requires type to be 'HTML' (optional)
          required: false
          style: form
          explode: true
          schema:
            type: boolean
        - name: start
          in: query
          description: ISO time string of the start of the output range (optional)
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          description: ISO time string of the end of the output range (optional)
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: List of events
          content:
            application/xml:
              schema:
                xml:
                  name: Events
                  wrapped: true
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        "400":
          description: Invalid input
      security:
        - auth_token_header: []
        - auth_token_cookie: []
    delete:
      tags:
        - Calendar
      summary: Delete an existing event
      description: "You must either own this calendar, have the associated group set as editableGroup or be an administrator to perform this action."
      operationId: deleteEvent
      parameters:
        - name: uid
          in: path
          description: UID of the user or group that owns the calendar
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: eventID
          in: query
          description: UID of the event that should get deleted
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "204":
          description: Successfully deleted event
        "400":
          description: Invalid UID supplied
      security:
        - auth_token_header: []
        - auth_token_cookie: []

  /api/users:
    post:
      tags:
        - Users
      summary: Create a new user
      description: "You must be an administrator to perform this action."
      operationId: createUser
      requestBody:
        description: XML document of the user you want to add
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: Successfully created user
        "400":
          description: Invalid input
      security:
        - auth_token_header: []
        - auth_token_cookie: []
    get:
      tags:
        - Users
      summary: List all users
      description: "You must be an administrator to perform this action."
      operationId: listUsers
      responses:
        "200":
          description: "List of all users (UID, first name, last name, mail)"
          content:
            application/xml:
              schema:
                type: array
                xml:
                  name: Users
                  wrapped: true
                items:
                  $ref: '#/components/schemas/User'
      security:
        - auth_token_header: []
        - auth_token_cookie: []

  /api/users/{uid}:
    get:
      tags:
        - Users
      summary: Get all user info
      description: "You must either be the corresponding user or an administrator to perform this action."
      operationId: getUser
      parameters:
        - name: uid
          in: path
          description: UID of the user that is edited
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: All the user settings
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
        "404":
          description: User not found
      security:
        - auth_token_header: []
        - auth_token_cookie: []
    put:
      tags:
        - Users
      summary: Update an existing user
      description: "You must either be the corresponding user or an administrator to perform this action. As normal user you can't edit the properties group, editableGroup and isAdministrator."
      operationId: updateUser
      parameters:
        - name: uid
          in: path
          description: UID of the user that is edited
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Updated XML document of the user
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        "204":
          description: Successfully updated user
        "400":
          description: Invalid UID supplied
        "404":
          description: User not found
      security:
        - auth_token_header: []
        - auth_token_cookie: []
    delete:
      tags:
        - Users
      summary: Delete an existing user
      description: "You must either be the corresponding user or an administrator to perform this action."
      operationId: deleteUser
      parameters:
        - name: uid
          in: path
          description: UID of the user that gets deleted
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "204":
          description: Successfully deleted user
        "404":
          description: User not found
      security:
        - auth_token_header: []
        - auth_token_cookie: []

  /api/groups:
    post:
      tags:
        - Groups
      summary: Create a new group
      description: "You must be an administrator to perform this action."
      operationId: createGroup
      requestBody:
        description: XML document of the group you want to add
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "201":
          description: Successfully created group
        "400":
          description: Invalid input
      security:
        - auth_token_header: []
        - auth_token_cookie: []
    get:
      tags:
        - Groups
      summary: List all groups
      description: "You must be an administrator to perform this action."
      operationId: listGroups
      responses:
        "200":
          description: "List of all groups"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Group'
        "404":
          description: No groups found
      security:
        - auth_token_header: []
        - auth_token_cookie: []

  /api/groups/{uid}:
    get:
      tags:
        - Groups
      summary: Get all group info
      description: "You must be an administrator to perform this action."
      operationId: getGroup
      responses:
        "200":
          description: "XML document of the group"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Group'
        "404":
          description: Group not found
      security:
        - auth_token_header: [ ]
        - auth_token_cookie: [ ]
    put:
      tags:
        - Groups
      summary: Update an existing group
      description: "You must either have the associated group set as editableGroup or be an administrator to perform this action."
      operationId: updateGroup
      parameters:
        - name: uid
          in: path
          description: UID of the group that is edited
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Updated XML document of the group
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "204":
          description: Successfully updated group
        "400":
          description: Invalid UID supplied
      security:
        - auth_token_header: []
        - auth_token_cookie: []
    delete:
      tags:
        - Groups
      summary: Delete an existing group
      description: "You must either have the associated group set as editableGroup or be an administrator to perform this action."
      operationId: deleteGroup
      parameters:
        - name: uid
          in: path
          description: UID of the group that gets deleted
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "204":
          description: Successfully deleted group
        "404":
          description: Group not found
      security:
        - auth_token_header: []
        - auth_token_cookie: []

  /api/token:
    post:
      tags:
        - Token
      summary: Create a new token
      description: "Everyone can perform this action. It sets the AuthToken as cookie and returns it in the body."
      operationId: createToken
      requestBody:
        description: XML document of the token you want to create
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Token'
        required: true
      responses:
        "201":
          description: Successfully created token
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Invalid input
      security:
        - auth_token_header: []
        - auth_token_cookie: []
    get:
      tags:
        - Token
      summary: List all tokens of a user
      description: "You must be either the corresponding user or administrator to perform this action."
      operationId: listToken
      parameters:
        - name: uid
          in: query
          description: UID of the user whose tokens should be listed
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: "List all tokens of specific user"
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
                xml:
                  name: 'results'
        "400":
          description: Invalid UID supplied
        "404":
          description: Token not found
        "405":
          description: Validation exception
      security:
        - auth_token_header: []
        - auth_token_cookie: []
    delete:
      tags:
        - Token
      summary: Delete an existing token
      description: "You must be either the corresponding user or administrator to perform this action."
      operationId: deleteToken
      parameters:
        - name: token
          in: query
          description: Token that should be deleted
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successfully deleted token
        "400":
          description: Invalid UID supplied
        "404":
          description: Token not found
      security:
        - auth_token_header: []
        - auth_token_cookie: []

components:
  securitySchemes:
    auth_token_header:
      type: apiKey
      in: header
      name: AuthToken
    auth_token_cookie:
      type: apiKey
      in: cookie
      name: AuthToken
  schemas:
    PersonInfo:
      required:
        - firstName
        - initials
        - lastName
        - mail
        - uid
      type: object
      properties:
        uid:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        initials:
          type: string
        mail:
          type: string
    Event:
      required:
        - category
        - description
        - end
        - location
        - modified
        - modifiedBy
        - presenter
        - start
        - title
        - uid
      type: object
      xml:
        name: Event
      properties:
        uid:
          type: string
        title:
          type: string
        description:
          type: string
        presenter:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/PersonInfo'
        category:
          type: string
          enum:
            - Lecture
            - Exam
            - Oral Exam
            - Meeting
            - Other
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        location:
          type: string
        modified:
          type: string
          format: date-time
        modifiedBy:
          $ref: '#/components/schemas/PersonInfo'
    User:
      required:
        - darkMode
        - firstName
        - initials
        - isAdministrator
        - lastName
        - mail
        - passwordHash
        - uid
      type: object
      xml:
        name: User
      properties:
        uid:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        initials:
          type: string
        mail:
          type: string
        passwordHash:
          type: string
        group:
          type: array
          items:
            $ref: '#/components/schemas/Group'
        editableGroup:
          type: array
          items:
            $ref: '#/components/schemas/Group'
        darkMode:
          type: boolean
        isAdministrator:
          type: boolean
    Group:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        url:
          type: string
    Token:
      type: object
      properties:
        uid:
          type: string
        unlimited:
          type: boolean
        validUntil:
          type: string
          format: date-time